/**
 * Vader class file
 * 
 * A tiny logger for Dart
 *
 * Inspired by KLogger ({@link https://github.com/katzgrau/KLogger})
 *
 * @author Ivan Krutov <vania-pooh@vania-pooh.com>
 * @since 0.0.1
 */

/**
 * Vader class
 */
class Vader implements Iterator<LogEntry>{
    
    /**
     * @var stores log entries generated by the class
     */
    List<LogEntry> _entries = new List<LogEntry>();
    
    /**
     * @var stores internal iterator position
     */
    int _position = 0;
    
    /**
     * @var stores stream instance
     */
    Stream _stream = null;

    /**
     * @var stores Vader instance
     */
    static Vader _instance = null;

    /**
     * Singleton instance retrieval method
     * @return returns Vader instance
     */
    static Vader vader(Stream stream) {
        if (Vader._instance == null){
            Vader._instance = new Vader._internal(stream); 
        }
        return Vader._instance;
    }
    
    /**
     * Class constructor
     * @param stream an output stream to be used for logging
     * @return nothing to return nothing to return
     */
    Vader._internal(Stream stream) {
        this._stream = stream;
    }
    
    /**
     * @return returns stream instance
     */
    Stream _getStream(){
        return _stream; 
    }
    
    /**
     * Iterator next() method
     * @return return next log entry
     */
    LogEntry next(){
        List<LogEntry> list = getEntries();
        this._position++;
        return list[this._position];
    }
    
    /**
     * @return returns whether iterator has next element 
     */
    bool hasNext(){
        return (this._position <= getEntries().length - 1); 
    }
    
    /**
     * Moves iterator marker to the first element (i.e. resets iterator)
     * @return nothing to return 
     */
    void reset(){
        this._position = 0;
    }
    
    /**
     * Returns the entire message queue (leaving it intact)
     * @return nothing to return
     */
    List<LogEntry> getEntries() {
        return this._entries;
    }

    /**
     * Removes all entries from the logger
     * @return nothing to return
     */
    void clear() {
        getEntries().clear();
    }
    
    /**
     * Logs DEBUG severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logDebug(String message) {
        log(message, Severity.DEBUG);
    }
    
    /**
     * Logs INFO severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logInfo(String message) {
        log(message, Severity.INFO);
    }

    /**
     * Logs NOTICE severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logNotice(String message) {
        log(message, Severity.NOTICE);
    }

    /**
     * Logs WARN severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logWarn(message) {
        log(message, Severity.WARN);
    }

    /**
     * Logs ERR severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logError(String message) {
        log(message, Severity.ERR);
    }

    /**
     * Logs FATAL severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logFatal(String message) {
        log(message, Severity.FATAL);
    }

    /**
     * Logs ALERT severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logAlert(String message) {
        log(message, Severity.ALERT);
    }

    /**
     * Logs CRIT severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logCrit(String message) {
        log(message, Severity.CRIT);
    }

    /**
     * Logs EMERG severity level message
     * @param message message to log
     * @return nothing to return
     */
    void logEmerg(String message) {
        log(message, Severity.EMERG);
    }

    /**
     * Logs message with provided severity level
     * @param message message to be added to the log
     * @param severity severity level of log message
     * @return nothing to return
     */
    void log(String message, Severity severity) {
        if (severity != Severity.OFF){
            String logLine = _getLogLine(message, severity);
            LogEntry logEntry = new LogEntry(logLine, severity);
            getEntries().add(logEntry);
            _getStream().output(logEntry);
        }
    }
    
    /**
     * Returns a text for a single log line
     * @param message message to be logged
     * @param severity message severity to be used
     * @return text for a single log line
     */
    String _getLogLine(String message, Severity severity) {
        String severityString = severity.toString();
        Date now = new Date.now();
        String datetime = now.toLocal().toString();
        return "=== $datetime $severityString $message";
    }

}